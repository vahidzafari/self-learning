package main

import (
	"fmt"
	"os"
	"runtime"
	"strconv"
	"sync"
	"time"
)

// A worker pool is a set of threads that process jobs assigned to them. The main
// process accepts all incoming requests, which are forwarded to worker processes
// to get served. Once a worker process has finished its job, it is ready to serve a new
// client. As Go does not have threads, the presented implementation is going to
// use goroutines instead of threads. Additionally, threads do not usually die after
// serving a request because the cost of ending a thread and creating a new one is too
// high, whereas goroutines do die after finishing their job. Worker pools in Go are
// implemented with the help of buffered channels, because they allow you to limit
// the number of goroutines running at the same time.

// The Client structure is used for keeping track of the requests that the program is
// going to process.
type Client struct {
	id      int
	integer int
}

// The Result structure is used for keeping the data of each Client as well as the results
// generated by the client.
type Result struct {
	job    Client
	square int
}

// The clients and data buffered channels are used to get new client requests and
// write the results, respectively. If you want your program to run faster, you can
// increase the value of size.
var size = runtime.GOMAXPROCS(0)
var clients = make(chan Client, size)
var data = make(chan Result, size)

func worker(wg *sync.WaitGroup) {
	for c := range clients {
		square := c.integer * c.integer
		output := Result{c, square}
		data <- output
		time.Sleep(time.Second)
	}
	wg.Done()
}

// The purpose of the create() function is to create all requests properly and then
// send them to the clients buffered channel for processing. Note that the clients
// channel is read by worker().
func create(n int) {
	for i := 0; i < n; i++ {
		c := Client{i, i}
		clients <- c
	}
	close(clients)
}

// In the following code, you read the command-line parameters that define the
// number of jobs and workers. If the number of workers is bigger than the size of the
// clients buffered channel, then the number of goroutines that are going to be created
// is equal to the size of the clients channel. Similarly, if the number of jobs is greater
// than the number of workers, the jobs are served in smaller chunks.
func main() {

	if len(os.Args) != 3 {
		fmt.Println("Need #jobs and #workers!")
		return
	}
	nJobs, err := strconv.Atoi(os.Args[1])
	if err != nil {
		fmt.Println(err)
		return
	}
	nWorkers, err := strconv.Atoi(os.Args[2])
	if err != nil {
		fmt.Println(err)
		return
	}

	go create(nJobs)

	// The finished channel is used for blocking the program and, therefore, needs no
	// particular data type.
	finished := make(chan interface{})

	go func() {
		for d := range data {
			fmt.Printf("Client ID: %d\tint: ", d.job.id)
			fmt.Printf("%d\tsquare: %d\n", d.job.integer, d.square)
		}

		// The finished <- true statement is used for unblocking the program as soon as
		// the for range loop ends. The for range loop ends when the data channel is closed,
		// which happens after wg.Wait(), which means after all workers have finished.
		finished <- true

	}()
	var wg sync.WaitGroup
	for i := 0; i < nWorkers; i++ {
		wg.Add(1)
		go worker(&wg)
	}
	wg.Wait()
	close(data)

	fmt.Printf("Finished: %v\n", <-finished)
}
